<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="file:/home/lou/Public/TEIslides/teislides.rnc" type="application/relax-ng-compact-syntax"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>ELTeC Tutorial 2 : handling plain text files</title>
            </titleStmt>
            <publicationStmt>
                <p>Publication information</p>
            </publicationStmt>
            <sourceDesc>
                <p>Information about the source</p>
            </sourceDesc>
        </fileDesc>
    </teiHeader>
    <text>
        <body>
            <div type="slide">
                <head>Quick ELTeC Corpus Building</head>
                <p>We've found a great resource on the internet: 100 transcribed Polish novels, all
                    ready to be used. Just a few problems: <list>
                        <item>No metadata (other than filenames), so we need to build a proper ElTeC
                            header for each one</item>
                        <item>No markup of any sort, so we need to identify chapters, headings, and
                            paragraphs automatically if possible</item>
                    </list></p>
                <p>This tutorial steps you through the process of going from a plain text file to a
                    level-0 encoded ElTeC conformant version.  You should be able to carry this out
                    without any knowledge of Polish, though we do have a Polish participant who has
                    kindly agreed to provide advice if you get stuck. </p>
            
                <p>The complete process looks like this : </p>
                <list>
                    <item>choose the text and assemble metadata about it</item>
                    <item>create a new empty ELTeC-0 document</item>
                    <item>complete its TEI Header</item>
                    <item>insert the text of the corresponding file into the <gi>body</gi> of the document
                    </item>
                    <item>identify chapter divisions and chapter titles</item>
                    <item>identify paragraphs</item>
                </list>
            </div>
            <div type="slide">
                <head>choose the text and create a document</head>
                <p>Take a look at the <ident>POL</ident> folder. It contains 18 files we've
                    pre-selected for you, along with a tiny bit of metadata in a file called
                        <ident>titles.txt</ident> which supplies you with an identifier, a filename,
                    a wordcount, and a magic incantation (see below) for each title. Choose one
                    to work on (or we'll give you one)! </p>
                <p>Each filename contains the surname of the author, a word from the title, and the
                    date of first publication. You'll need to enter the name and the title in some
                    suitable search engine (Wikipedia, Worldcat ...) to get the metadata necessary
                    to complete your TEI Header, notably the author's full name, dates, and sex, as
                    well as the full title.</p>
                <p> We also know that each text is derived from a digital collection called
                    <title>100 Polish Novels</title> transcribed  by
                    <!--Jan Rybicki and Maciej Eder
                        of -->the
                    Computational Stylistics Group in Krakow, and that it is freely available
                    from their GitHub repository at
                    https://github.com/computationalstylistics/100_polish_novels. We do not however
                    know much about the print sources for these texts: hopefully your researches should
                    throw up some information at least about their first edition in book form. 
                    Armed with 
                    that additional information for your chosen
                    text, proceed to create a new file and a valid TEI header for the file.</p>
                <p>This process is described in detail in the <ref target="tutorial-hdr.html">Header Tutorial</ref>. </p>
            </div>   
            <div type="slide">
                <head>add some text</head>
                <p>Now we are ready to add some text to our document. </p>
                <list>
                    <item>put the cursor inside the solitary <gi>p</gi> contained by the
                            <gi>body</gi> element. </item>
                    <item>select Document-> File -> Insert File from the menu, and navigate to the
                        text file you are planning to convert</item>
                    <item>Press Open, and the content of the file is inserted into your document.
                    </item>
                </list>
                <p>Note that the error message <code>The body of a text must contain at least one
                        chapter</code> is still present. We will need to introduce more markup. We
                    could do this slowly and painfully, one step at a time, but computers are
                    supposed to make it easier to automate tasks which are slow and painful. In the
                    next section, we'll see how you can take advantage of any systematic patterns in
                    the format of a non-marked-up text to introduce explicit XML markup. To do this
                    we'll use the sophisticated Find/Replace tools built into oXygen. </p>
            </div>
            <div type="slide">
                <head>identify the chapters and headings</head>
                <p>To begin, open the <ident>Find/Replace</ident> dialogue and make sure that the
                    check box <ident>Regular expression</ident> is selected. A <term>regular
                        expression</term> is a kind of pattern: the find and replace command usually
                    searches for specific character strings; when regular expressions are enabled,
                    it can also search for complex patterns of characters.</p>
                <p>For example, in some of our Polish texts, every new chapter begins with a roman
                    number on a line of its own. In other texts the chapter number is preceded by
                    the word <code>Rozdział</code>; in yet others the chapter has a title given in
                    uppercase letters only. We can write regular expressions to cater for all of
                    these possibilities. Without regular expression matching, we could seek lines
                    containing the explicit strings I, II, III, IV etc. But it is much simpler to
                    seek all such lines by means of a regular expression matching any sequence of
                    one or more of the letters I V or X followed by a new line. </p>
                <list>
                    <item>In file POL001 for example, each chapter is prefixed by a line containing
                        an uppercase Roman number, followed by a line containing the chapter title,
                        all in uppercase. We can use this regular expression to find these:
                            <code>\n[IXV]+\n[\s\p{Lu}]+\S\n</code>.</item>
                    <item>In file POL007, however, each chapter is prefixed by the word ROZDZIAŁ,
                        followed by one or more spaces, followed by a roman number and a full stop,
                        and a new line. Here's a regular expression which will find these :
                            <code>ROZDZIAŁ\s+[IVX]+\.</code></item>
                    <item>In file POL014, chapters always begin with a lines containing a sequence
                        of uppercase letters and spaces. Here's a regular expression which will find
                        them: <code>[\p{Lu}\s]+\n</code>
                    </item>
                    <item>Of course, in some cases, for example POL004 or POL006, we can't easily
                        identify where new chapters begin, or they may not be marked at all. Where
                        we can however we've included a suggested regular expression in the
                            <ident>titles.txt</ident> file (that's what the mysterious incantantion
                        after the word count is)</item>
                </list>
                <p>The real power of regular expression matching is not just that it enables us to
                    find quickly particular strings in the text. It also allows us to specify
                    replacements for those strings. In our case, wherever we identify something
                    which is the heading of a chapter, we need to tag it as a <gi>head</gi>, and
                    also show that it begins a new chapter by inserting a <tag>div
                        type="chapter"</tag> tag, and (to ensure our document remains well-formed
                    XML) preceding it with a <tag>/div</tag> tag to close the preceding chapter. The
                    syntax for doing this is simple enough: the replacement part of the
                    find/replace dialogue can include numbered references (like this :
                        <code>\1</code>) which are to be expanded by a part of the matched string,
                    specifically the part enclosed in parentheses. </p>
                <p>This is easier to understand with an example. Let's suppose you are working on
                    POL001.</p>
                <list>
                    <item>Open the <ident>Find/Replace</ident> dialogue by typing CTRL-F or
                        selecting Find->Find/Replace from the main menu, and type the incantation
                            <code>\n([IVX]+)\n([\s\p{Lu}]+)\S\n</code> carefully into the Find box.
                        Press the <ident>Find</ident> button to check that it is finding what you
                        expect: you should see that the lines <code>I</code> and
                            <code>ALKHADAR</code> have been selected. </item>
                    <item>Each time you press Find, oXygen will step through the file selecting any
                        line containing just a sequence of one or more I X V characters followed by
                        a line containing any sequence of uppercase letters. Try it, just to check.
                        When you're satisfied the regexp is working correctly, move the cursor back
                        to the start of the file and find the first chapter again. </item>
                    <item>The parentheses in your regexp allow us to pick out the two character
                        strings that have been matched, for use in the replacement value. Type the
                        following into the <ident>Replace With</ident> dialogue
                            <code><![CDATA[ \n</div><div type="chapter"><head>\1</head>\n<head>\2</head>\n]]></code>
                        Press the Replace button. You should now see something like this at the
                        start of your file:
                        <egXML xmlns="http://www.tei-c.org/ns/Examples"><![CDATA[<body>
        <p>Michał Bałucki 
            PRZEBUDZENI
            </div><div type="chapter"><head>I</head>
                <head>ALKHADAR</head>
                Warszawo! niewolnico! kiedyś ....]]></egXML>
                    </item>
                    <item>(The <tag>/div</tag> is underlined in red since there's no chapter to
                        close here. Never mind, we'll fix that later)</item>
                    <item>When you are sure that your regexp is working correctly, press the
                            <ident>Replace to End</ident> button to repeat this manoeuvre for the
                        whole of the rest of the file. You should find 23 matches, and the Outline
                        view (Select Window -> Show view -> Outline if this is not open) should show
                        that you now have 23 chapters. </item>
                </list>
            </div>
            <div type="slide">
                <head>identify the paragraphs</head>
                <p>In this file, every line other than those beginning with a &lt; character now
                    contains a single paragraph. We can use a simple regexp to mark them all up as
                        <gi>p</gi> elements : </p>
                <list>
                    <item>Type <code>\n([^&lt;].+)</code> into the <ident>Find</ident> box, and
                            <code>\n&lt;p>\1&lt;/p></code> into the <ident>Replace with:</ident>
                        box.</item>
                    <item>Move the cursor to the start of the file and check that this regexp does
                        what you expect</item>
                    <item>Click the <ident>Replace to End</ident> button as before. There should be
                        about 1994 matches and your task is almost complete!</item>
                    <item>Finally, go back to the start of the document and delete the lines before
                            <tag>div type="chapter"</tag>, including the redundant <tag>/div</tag>.
                        Your file is valid! </item>
                </list>
                <p>Of course, there's still work to be done... we have not tried to deal with the
                    occasional piece of verse, nor have we tried to markup the trailing headings at
                    the end of some divisions, so these are all appearing as spurious <gi>p</gi>
                    elements. Feel free to continue perfecting this text -- or maybe you'd rather
                    try a different one? Congratulations on getting this far! </p>
            </div>
        </body>
    </text>
</TEI>
